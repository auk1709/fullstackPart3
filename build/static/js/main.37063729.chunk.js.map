{"version":3,"sources":["components/Note.tsx","services/notes.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","toggleImportanceOf","find","n","changedNote","undefined","returnedNote","map","catch","error","setTimeout","key","action","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"uNAuBeA,EAZmB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACnCC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBChBpCK,EAAU,8BAuBD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEb,OAAOK,EAAQM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,MAaxC,EAVA,SAACO,GAEd,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACJ,EAASM,GAEvB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCL5BK,EAfA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,4NCCN,IAAMC,EAAe,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKvB,UAAU,SACZuB,IAqGQC,EAhGH,WAAO,IAAD,EACUC,mBAAsB,IADhC,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,yBAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,oBAAU,WACRC,IAEGzB,KAAK,SAAA0B,GACJT,EAASS,MAEZ,IAEHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SACpC,IAAMC,EAAcV,EAChBJ,EACAA,EAAMe,OAAO,SAAC7C,GAAD,OAAeA,EAAKG,YAE/B2C,EAAqB,SAAClC,GAC1B,IAAMZ,EAAO8B,EAAMiB,KAAK,SAAAC,GAAC,OAAIA,EAAEpC,KAAOA,IAChCqC,E,qVAAW,IAAQjD,EAAR,CAAcG,eAAoB+C,IAATlD,GAAsBA,EAAKG,eAAY+C,IAEjFX,EACU3B,EAAIqC,GACXnC,KAAK,SAAAqC,GACJpB,EAASD,EAAMsB,IAAI,SAAApD,GAAI,OAAIA,EAAKY,KAAOA,EAAKZ,EAAOmD,OAEpDE,MAAM,SAAAC,GACLjB,EACE,4CAEFkB,WAAW,WACTlB,EAAgB,KACf,KACHN,EAASD,EAAMe,OAAO,SAAAG,GAAC,OAAIA,EAAEpC,KAAOA,QAkC1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAce,QAASS,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAxCeU,EAAYQ,IAAI,SAACpD,GAAD,OACjC,kBAAC,EAAD,CACEwD,IAAKxD,EAAKY,GACVZ,KAAMA,EACNC,iBAAkB,kBAAM6C,EAAmB9C,EAAKY,UAuChD,0BAAM6C,OAAO,GAAGC,SAnCJ,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAwB,CAC5BjD,GAAIkB,EAAMa,OAAS,EACnBtC,QAAS2B,EACTnB,MAAM,IAAIiD,MAAOC,cACjB5D,UAAW6D,KAAKC,SAAW,IAG7B1B,EACUsB,GACP/C,KAAK,SAAAqC,GACJpB,EAASD,EAAMb,OAAOkC,IACtBlB,EAAW,QAuBX,2BACEiC,KAAK,OACLC,MAAOnC,EACPoC,SAtBiB,SAACT,GACxBlB,QAAQC,IAAIiB,EAAMU,OAAOF,OACzBlC,EAAW0B,EAAMU,OAAOF,UAsBpB,4BAAQD,KAAK,UAAb,SAGF,kBAAC,EAAD,Q,MC/GNI,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.37063729.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype NoteProps = {\r\n  note: {\r\n    id: number,\r\n    content: string,\r\n    important: boolean,\r\n    date: string\r\n  }\r\n  toggleImportance: any\r\n}\r\nconst Note: React.FC<NoteProps> = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nimport { request } from 'http';\r\nconst baseUrl = 'http://localhost:3001/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = (newObject: any) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id: any, newObject: any) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Footer from './components/Footer'\n\ntype NoteState = {\n  id: number,\n  content: string,\n  date: string,\n  important: boolean\n}\n\nconst Notification = ({ message }: { message: any }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState<NoteState[]>([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happend...')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note: any) => note.important)\n\n  const toggleImportanceOf = (id: React.ReactText) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: note !== undefined ? !note.important : undefined };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          \"Note ' ' was already deleted from server\"\n        )\n        setTimeout(() => {\n          setErrorMessage('')\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const rows = () => notesToShow.map((note: NoteState) =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const addNote = (event: any) => {\n    event.preventDefault()\n    const noteObject: NoteState = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event: any) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form action=\"\" onSubmit={addNote}>\n        <input\n          type=\"text\"\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}